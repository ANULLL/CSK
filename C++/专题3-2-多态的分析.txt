			多态的分析

一 饲养员喂动物
#include <iostream>
using namespace std;
//封装性
//继承性
//多态性

class Food{
	string name;
	public:
	Food(string name):name(name){}

		string getName() const{  //get器 写const是因为 也能操作const成员
			return name;
		}
};

//抽象类:拥有纯虚函数的类成为抽象类。
//特征：抽象类本身不能实例化
//纯虚函数:只有函数声明,没有函数实现的函数,成为纯虚函数。
class Animal{
protected:
	string name;
public:
	Animal(string name):name(name){}
	virtual void eat(Food& food) = 0; //纯虚函数,交给子类去实现
	/*{
		cout<<name<<"吃"<<food.getName()<<endl;
	}*/
    string getName() const {
		return name;
	}

    virtual ~Animal(){}
};

class Fish:public Food{
public:
	Fish(string name):Food(name){
	}
};

class Bone:public Food{
public:
	Bone(string name):Food(name){
	}
};

class Cat:public Animal{
public:
	Cat(string name):Animal(name){
	}

	void eat(Food& food){
			cout<<name<<"躺着吃"<<food.getName()<<endl;
		}
};

class Dog:public Animal{
public:
	Dog(string name):Animal(name){
	}
	void eat(Food& food){
				cout<<name<<"转着吃"<<food.getName()<<endl;
			}
};

class Feeder{
	string name;
	public:
		Feeder(string name):name(name){}
		void feed(Animal& animal,Food& food){
			cout<<name<<"给"<<animal.getName()<<"喂"<<food.getName()<<endl;
			animal.eat(food);
		}
};

//指针实现多态

//饲养员给猫喂鱼
//饲养员给动物喂食物
int main(){
	Fish fish("大鳄鱼");
	Cat cat("熊猫");
	Feeder feeder("唐伯虎");
	//feeder.feed(cat,fish); //饲养员给猫喂鱼

	Bone bone("鱼骨头");
	Dog dog("藏鳌");
	//feeder.feed(dog,bone);

//(1)指针实现多态
	Food* pFood = &fish;
	Animal *pAnimal = &cat;
	feeder.feed(*pAnimal,*pFood);

	pFood = &bone;
	pAnimal = &dog;
	feeder.feed(*pAnimal,*pFood);
//(2)引用实现多态
	Animal& pa2 = cat;
	Food& pf2 = fish;
	feeder.feed(pa2,pf2);
	pa2.eat(pf2);

	return 0;
}


二 一个游戏中有多种怪物(Monster),怪物之间可能要发生战斗(fight),每场战斗都是一个怪物与另一个怪物之间的一对一PK。每个怪物都有自己的生命值(hitpoint),攻击力值(damage)和防御力值(defence),每种怪物都有各自特有的攻击（attack）方式，产生相应的攻击效果;战斗时，两个怪物依次攻击对方，直到一方生命值小于等于0.
  1).请定义并实现怪物Monster,要求该类至少有一个不带virtual修饰的成员函数fight,用来描述一个怪物和另外一个怪物战斗的过程，该函数的实现可为Monster类的任意派生类所复用。  2).作为怪物的特例，猫和狗的攻击效果如下所示，在Monster的基础上，以继承手段定义并实现这两个类。猫进攻导致对方的生命值减少量： （猫的攻击值*2-对方的防御力值），若上式小于1，则取1狗进攻导致对方的生命值减少量:   (猫的攻击力值-对方的防御力值+5)*2，若上式小于2，则取2

#include <iostream>
using namespace std;

class Monster{
public:
	string m_name;
	int m_hitpoint;
	int m_damage;
	int m_defence;
public:
	Monster(string name,int hitpoint,int damage,int defence){
		m_name  = name;
		m_hitpoint = hitpoint;
		m_damage = damage;
		m_defence = defence;
	}
  virtual ~Monster(){}
	virtual int attack(Monster& m) = 0;
	void fight(Monster& m){
		while(1){
			int h = (*this).attack(m); //this->  等价于 (*this).   //多态
			m.m_hitpoint -= h;
			if(m.m_hitpoint <= 0){
				cout<<m.m_name<<"被乱拳打死!"<<endl;
				 break;
			}
			h = m.attack(*this);   //多态
				m_hitpoint -= h;
			if(m_hitpoint <=0 ){
				cout<<m_name<<"被乱拳打死!"<<endl;
				break;
			}
		}
		showResult();
		m.showResult();
	}

	void showResult(){
		cout<<"========================="<<endl;
		cout<<"怪物名称:"<<m_name<<endl;
		cout<<"生命值:"<<m_hitpoint<<endl;
		cout<<"攻击能力:"<<m_damage<<endl;
		cout<<"防御能力::"<<m_defence<<endl;
	}
};

class Cat:public Monster{
public:
	Cat(string name,int hitpoint,int damage,int defence):Monster(name,hitpoint,damage,defence){};

	 int attack(Monster& m){
		 int h = m_damage*2-m.m_defence;
		 if(h<1) h=1;
		 cout<<m_name<<"打掉"<<m.m_name<<h<<"点血"<<endl;
		 return h;
	 }
};


class Dog:public Monster{
public:
	Dog(string name,int hitpoint,int damage,int defence):Monster(name,hitpoint,damage,defence){};

	 int attack(Monster& m){
		 int h = (m_damage-m.m_defence+5)*2;
		 if(h<2) h=2;
		 cout<<m_name<<"打掉"<<m.m_name<<h<<"点血"<<endl;
		 return h;
	 }
};

int main(){
	Cat cat("家飞猫",50000,50,20);
	Dog dog("旺才",600,70,15);
	cat.fight(dog);
		return 0;
}


三 以下哪些情况可以实现多态

#include <iostream>
using namespace std;

class A{
public:
	A(){cout<<"A()"<<endl;}
	virtual ~A() = 0;
};

A::~A(){cout<<"~A()"<<endl;}

class B:public A{
public:
	B(){cout<<"B()"<<end;}
};

int main(){
	A a;
	B b;
	A* p = &a;      //NO 无多态
	A* p =&b;       //YES 父类指针访问子类对象
	A& p = a;       //NO 无多态 普通的引用
	A& p = b;       //YES 父类引用访问子类对象
	A* p = new B;   //YES 父类指针访问子类对象
	A& p  =new B;   //NO 无多态 类型不匹配
	A& p  =*(new B); //NO 无多态  C++不允许此语法
	A p = b;         //NO 无多态 copy construct  A p(b); 子类的对象永远可以当成父类对象使用
	return 0;
}



四 总结
  1 实现多态的条件
    （1）继承
    (2) 父类中有虚构函数
    (3) 子类覆盖(重写父类的方法) 
    (4) 用父类的指针或引用指向子类对象，然后调用子类的方法。
  2 两种方法实现多态
  （1） 父类的指针指向子类对象。
   (2) 父类的引用引用子类对象。










