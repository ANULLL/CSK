

一 运算符重载的两种实现方式
 例程1：

//实现运算服重载,就是编写相应的运算符函数。
//友员函数都是全局函数
//函数必须以operator开头
//实现方式: 1. 友员方式  2.成员方式

#include <iostream>
using namespace std;
class E{
	int i;
	friend E add(const E& e1,const E& e2);  //0.原始的实现加法
	friend E operator+(const E& e1,const E& e2);// 1友员实现
public:
	E(int i =0):i(i){cout<<"E()"<<endl;}
	E(const E& e):i(e.i){cout<<"E(copy)"<<endl;}

	//2.成员方式
	E operator-(const E& e){
		int i = this->i-e.i;
		return E(i);
	}
	void show(){cout<<"i="<<i<<endl;}
	~E(){cout<<"~E()"<<endl;};
};

E add(const E& e1,const E& e2){
	int i = e1.i+e2.i;
	return E(i); //返回局部的，不会产生心的对象，但是返回static或者是全局的就会产生新的
}

//add->operator+
//运算符重载
E operator+(const E& e1,const E& e2){
	int i = e1.i+e2.i;
	return E(i); //返回局部的，不会产生心的对象，但是返回static或者是全局的就会产生新的
}

//实现运算服重载,就是编写相应的运算符函数。
//友员函数都是全局函数
//函数必须以operator开头
//实现方式: 1. 友员方式  2.成员方式
int main(){
	E e1(10);
	E e2(5);
	//0.原始的实现加法
	E e12= add(e1,e2); //等价于E e = E(15); 等价于 (E)15 =15;  等价于E e = 15;
	e12.show();

	cout<<"===运算符重载======="<<endl;
	//1. 友员方式
	E sum1 = operator+(e1,e2);
	sum1.show();

	E sum2 = e1 + e2;//等价于operator+(e1,e2);
	sum2.show();

	//2.成员方式
	E sub = e1 - e2; //e1.operator-(e2).
	sub.show();
	cout<<"===运算符重载======="<<endl;

	return 0;
}

  例程2：


#include <iostream>
using namespace std;
class Fract {
private:
	int n;
	int d;
	friend ostream& operator<<(ostream& os,const Fract& f);
public:
	Fract(int an = 0, int ad = 1) :n(an), d(ad) {cout<<"Fract()"<<endl;}
	Fract(const Fract& f){cout<<"Fract(copy)"<<endl;}

	virtual void show() {
		cout << "(" << n << "/" << d << ")" << endl;
	}

	Fract&/*(此处很重要)*/ operator++(){  //应该加引用,否则会产生临时对象。
		n =n+d;
		return *this; //返回自己
	}

  virtual ~Fract(){cout<<"~Fract()"<<endl;} // 为什么父类中有了虚函数，析构函数必须写成虚析构函数？

	double value() {
		return (double) n / d;
	}
};

//方法链
ostream& operator<<(ostream& os,const Fract& f){  //os只能有一份
	os<<"["<<f.n<<"/"<<f.d<<"]";
	return os;
}

int main(){
	Fract f1(2,3),f2(3,4);
	(++f1).show();

	//(2/3)+(3/4) =(5/7)
	//f1+f2 = (f1+f2)
	//cout<<f1<<"+"<<f2<<"="<<(f1+f2)<<endl;

	/*int a1 = 3,a2 = 4;
	cout<<a1<<"+"<<a2<<"="<<(a1+a2)<<endl;*/

	cout<<f1<<endl; //cout是ostream的对象 输出流的对象
	//f1<<cout;
	//operator<<(cout,f1);
	//cout.operator<<(f1); //已经被语言实现
	return 0;
}


例程3:基本类型的重载
#include <iostream>
using namespace std;

class A{
	int data;
public:
	A(int d=0):data(d){}
	operator int(){
		return data;
	}
	operator bool(){
		return data!=0;
	}
	operator char(){
		return (char)data;
	}
};

int main()
{
	A a1(65), a2(200), a3;
	cout << "a1=" << (char)a1 << endl;
	int d=a2;
	cout << "d=" << d << endl;
	bool b;
	b = a3;
	if(b)
		cout << "true" << endl;
	else
		cout << "false" << endl;
}


例程4; << ,>>,++a,++b,++,--的重载
#include <iostream>
using namespace std;

class A{
	int data;
public:
	A(int d=0):data(d){}
	friend ostream& operator<<(ostream&os, const A& a){
		os << a.data;
		return os;
	}
	friend istream& operator>>(istream&is, A& a){
		is >> a.data;
		return is;
	}
	friend A& operator++(A& a){
		a.data+=10;
		return a;
	}
	A& operator--(){
		data-=10;
		return *this;
	}
	friend A operator++(A& a,int){
		A old(a);
		a.data+=1;
		return old;
	}
	A operator--(int){
		A old(*this);
		data-=1;
		return old;
	}
};

int main()
{
	A a1(100), a2(200);
	cout << "a1=" << a1 << endl;
	cout << "a2=" << a2 << endl;
	cout << "++a1=" << ++a1 << endl;
	cout << "--a2=" << --a2 << endl;
	cout << "a1++=" << a1++ << endl;
	cout << "a1=" << a1 << endl;
	cout << "a2--=" << a2-- << endl;
	cout << "a2=" << a2 << endl;
}




 